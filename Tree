using System;
using System.Collections.Generic;
using System.Text;

namespace Binary3
{
    public class BinaryTree
    {
        private Node currentroot;
        public BinaryTree()
        {
            currentroot = null;
        }
        public void Add(int value)
        {

            if (currentroot == null)
            {
                currentroot = new Node(value);
                return;
            }

            Sort(currentroot, new Node(value));
        }
        private void Sort(Node root, Node newNode)
        {
            if (root == null)
                root = newNode;

            if (newNode.value < root.value)
            {
                if (root.Left == null)
                    root.Left = newNode;
                else
                    Sort(root.Left, newNode);

            }
            else
            {
                if (root.Right == null)
                    root.Right = newNode;
                else
                    Sort(root.Right, newNode);
            }
        }
        private void Output(Node root)
        {
            if (root == null) return;
            Output(root.Left);

            System.Console.Write(root.value + " ");
            Output(root.Right);
        }
        public void Output()
        {
            Output(currentroot);
        }

        private void FindElement(Node root,int findable)
        {
            if (root.value > findable)
            {
                Console.WriteLine(root);
                Console.WriteLine("left");
                FindElement(root.Left, findable);
            }
            if (root.value < findable)
            {
                Console.WriteLine("right");
                FindElement(root.Right, findable);
            }       

        }
        public void FindElement(int findable)
        {
            FindElement(currentroot, findable);
        }


    }
}
